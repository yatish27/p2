<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: issue05 | P2 Magazine]]></title>
  <link href="http://thoughtworks.github.io/p2/blog/categories/issue05/atom.xml" rel="self"/>
  <link href="http://thoughtworks.github.io/p2/"/>
  <updated>2013-10-08T16:40:39+05:30</updated>
  <id>http://thoughtworks.github.io/p2/</id>
  <author>
    <name><![CDATA[The P2 Elves]]></name>
    <email><![CDATA[p2@thoughtworks.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Credits]]></title>
    <link href="http://thoughtworks.github.io/p2/issue05/credits/"/>
    <updated>2013-10-09T00:00:00+05:30</updated>
    <id>http://thoughtworks.github.io/p2/issue05/credits</id>
    <content type="html"><![CDATA[<p><strong>Editorial Committee</strong></p>

<p>Ryan Boucher, Rachel Laycock, Rebecca Parsons, Nick Thorpe</p>

<p><strong>Writers</strong></p>

<p>Ryan Boucher, Chris Ford, Alex Ong, Rachel Laycock, Nick Thorpe</p>

<p><strong>Sub-Editors</strong></p>

<p>Ryan Boucher, Sarah Howe, Rachel Laycock, Paige Mulholland, Nick Thorpe</p>

<p><strong>Site Design</strong></p>

<p>Ryan Boucher, Andrew Carr, Mike Gardiner</p>

<p><strong>Photo Credit</strong></p>

<p>Old computers sitting around the Chicago office &ndash; William Kimmel</p>

<p><strong>Special Thanks</strong></p>

<p>Alex Ong, John Stojanovski, Chris Ford</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puzzle]]></title>
    <link href="http://thoughtworks.github.io/p2/issue05/puzzle/"/>
    <updated>2013-10-08T00:00:00+05:30</updated>
    <id>http://thoughtworks.github.io/p2/issue05/puzzle</id>
    <content type="html"><![CDATA[<p>No new puzzle this month. Let’s get straight into the answer from last month. Judging from the answers, this one wasn’t as explained as well as it could have been. So, we’ll go through what was in our brains when we wrote it.</p>

<p>There is a sequence that starts with: 2, 4, 6, 8 and is followed by a blank. There are <strong>many</strong> numbers that <strong>could</strong> follow. We weren&rsquo;t aware of this when we wrote the puzzle but at oeis.org there are about 200 sequences, many obscure, some irrelevant, that start with 2, 4, 6, 8. I&rsquo;m going to include the puzzle solution factoring in all of these potential, mostly obscure, sequences. From analysis of these obscure sequences, none continue to 3, 6, 13 or 26. This will be relevant later.</p>

<p>Of all the numbers that can follow they fall into <strong>three</strong> categories. The number could be larger, smaller or the same as the last. What we are trying to do is to reduce our options and we’re using a technique known as equivalence partitioning.</p>

<p>Initial thoughts guesses:</p>

<ul>
<li>2, 4, 6, 8, 6</li>
<li>2, 4, 6, 8, 8</li>
<li>2, 4, 6, 8, 10</li>
</ul>


<p>Our first four numbers show that the sequence isn’t a decreasing sequence. The smaller (6) and equal (8) numbers prove that the sequence doesn’t have to be increasing. The larger number, if you chose 10, tells you nothing new. But we can do better with our first guess:</p>

<ul>
<li>2, 4, 6, 8, 3</li>
</ul>


<p>If 3 is in the sequence, then we have a non-increasing sequence that allows odd numbers and isn’t an obscure sequence.</p>

<ul>
<li>2, 4, 6, 8, 3, -1</li>
</ul>


<p>If we follow that up with -1 and it is allowed, then we can have any number in the sequence and it will be allowed. If -1 is not allowed. We can have any non-negative number. Follow this up with a 0. If we allow 0, then we do allow any non-negative number. If 0 is not in the sequence, then our sequence has to be made of positive numbers.</p>

<ul>
<li>2, 4, 6, 8, 3, -1 &ndash;> any number</li>
<li>2, 4, 6, 8, 3, <span style="color:red">-1x</span>, 0 &ndash;> any non-negative number</li>
<li>2, 4, 6, 8, 3, <span style="color:red">-1x</span>, <span style="color:red">0x</span> &ndash;> any positive number</li>
</ul>


<p>Let’s go back to the 3 and if that is not in the sequence. We should follow up with a 13. If we allow 13 then we know that odd numbers are ok, but smaller numbers are not. We also know that it isn’t an obscure sequence but we still not sure if the sequence is a greater than or a greater than or equal to. So we follow that up with another 13.</p>

<ul>
<li>2, 4, 6, 8, <span style="color:red">3x</span>, 13, 13 &ndash;> Any number that is greater to or equal to the prior</li>
<li>2, 4, 6, 8, <span style="color:red">3x</span>, 13, <span style="color:red">13x</span> &ndash;> Any number that is greater than the prior.</li>
</ul>


<p>What if 13 isn’t allowed. We are the point where we know that odd numbers are not allowed but that’s all we know. So we should follow that up with a 6. We need to know if smaller numbers are supported.</p>

<ul>
<li>2, 4, 6, 8, <span style="color:red">3x</span>, <span style="color:red">13x</span>, 6 &ndash;> Any even number</li>
</ul>


<p>If the 6 is not successful we try an 8. If the 8 is in the sequence we have a greater than or equal to situation. When the 8 is not in the sequence we follow up with a 26. We need to know if the sequence is one of the obscure ones or just an ever increasing even number</p>

<ul>
<li>2, 4, 6, 8, <span style="color:red">3x</span>, <span style="color:red">13x</span>, <span style="color:red">6x</span>, 8 &ndash;>  any even number that is greater to or equal to the prior</li>
<li>2, 4, 6, 8, <span style="color:red">3x</span>, <span style="color:red">13x</span>, <span style="color:red">6x</span>, <span style="color:red">8x</span>, 26 &ndash;> any even number that is greater than the prior</li>
<li>2, 4, 6, 8, <span style="color:red">3x</span>, <span style="color:red">13x</span>, <span style="color:red">6x</span>, <span style="color:red">8x</span>, <span style="color:red">26x</span> &ndash;> a special pattern from oeis.org</li>
</ul>


<p>How do we deal with the special patterns? That same way we have before, what’s the number that tells us the most about what we don’t know yet. What challenges our assumptions the most.</p>

<p>Of the potential next numbers it could be 10, 12, 14, 16, 18, 20, 22, 24, 30, 32, 38, 50 and 212. But when waited for number of sequences that have that number next the order changes to: 10, 12, 16, 20, 24, 22, 14, 18, 30, 32, 38, 50 and 212. There are 37 sequences that continue to 10. 27 that continue to 12 and the remainder have 5 or fewer options, most only have 1.</p>

<p>We continue the process as before, whittling away. No prizes are awarded this month.</p>

<p style="text-align:center;"> ⁂</p>

<p>For those that want to do some analysis on the oeis.org dataset, you can do the following:</p>

<p>Get all the things:</p>

<div class='normal-gist'><code id="gist-6724348" data-file="1.sh"></code></div>


<p>Merge all the things:</p>

<div class='normal-gist'><code id="gist-6724348" data-file="2.sh"></code></div>


<p>Open up sublime, and find all occurances of <span class='inline-code'><code>&lt;tt&gt;</code></span>, expand selection to the line, cut the selection. New document, paste. Remove the <span class='inline-code'><code>&lt;tt&gt;</code></span> and <span class='inline-code'><code>&lt;/tt&gt;</code></span>.</p>

<p>Now you have the dataset. F5 will sort the lines. Remove all those that don’t start with 2, 4, 6, 8. You can use a regex find here <span class='inline-code'><code>^2, 4, 6, 8</code></span>.</p>

<p>Enjoy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BDD and Legacy Systems]]></title>
    <link href="http://thoughtworks.github.io/p2/issue05/bdd-on-legacy/"/>
    <updated>2013-10-07T00:00:00+05:30</updated>
    <id>http://thoughtworks.github.io/p2/issue05/legacy-on-bdd</id>
    <content type="html"><![CDATA[<p>I often see or hear the complaint that behaviour driven development (BDD) results in tests that are slow, brittle or both. This is especially the case if the testing tool uses a Gherkin based syntax.</p>

<p>One of the benefits I get out of BDD is that it helps me flush out the domain model. Things get named and I ask questions about those named things. I question, uncover and learn. One of the challenges of BDD is when you already have a domain model coded into place, which is the case when you are dealing with legacy systems. Let’s ignore the fact that we’re in a situation where we are trying to use something called <em>behaviour driven development</em> and the code is already written and unlikely to have any tests at all.</p>

<blockquote><p>Developers, who don’t have remit to refactor, are no different to testers.</p></blockquote>

<p>What I’m talking about here is legacy systems. The system has been built; classes relate and collaborate. When the language of the tests you write are worded using a new domain model you end up having to implement the test using the existing implementation. This a non-trivial process and is where the slowness and brittleness can come in.</p>

<p>Imagine we’re working on a project and we have improved our understanding of the domain model. We could resolve these slowness and brittleness issues if we refactored our implementation to better map our better understood domain model. This isn’t an easy task. If you’re applying BDD after the fact it is usually because you’ve got no other tests anywhere else in the code base.</p>

<p>We know that refactoring is important and will help us, but <strong>who</strong> is writing these tests greatly influences whether or not the domain model will ever get refactored. Testers can be strong advocates of tools like Cucumber and strive to include them. But testers are rarely in a position to refactor the code. So tests written by testers will struggle to be fast and robust.</p>

<p>Developers, who don’t have remit to refactor, are no different to testers. They can write tests and these will support the new features they have deliver. Their tests though will also struggle to be fast and robust for the same reasons.</p>

<p>The takeaway is: the next time you decide to bring a BDD tool into your project make sure you can refactor your domain model. If you don’t you’ll just end up blaming the tool for being not very good at something it has no control over.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pattern Fun Facts: Decorator]]></title>
    <link href="http://thoughtworks.github.io/p2/issue05/pattern-fun-fact-decorator"/>
    <updated>2013-10-06T00:00:00+05:30</updated>
    <id>http://thoughtworks.github.io/p2/issue05/pattern-fun-fact-decorator</id>
    <content type="html"><![CDATA[<p>The decorator pattern is a nifty way of adding behaviour to existing objects. Let’s say you have a class that is responsible for sending messages over the network.</p>

<div class='normal-gist'><code id="gist-6724242" data-file="1.java"></code></div>


<p>Later, there comes a requirement where you want start making a copy of messages going over the network but you don’t want to change any existing behaviour. So you write a decorator to do the work.</p>

<div class='normal-gist'><code id="gist-6724242" data-file="2.java"></code></div>


<p>Now, because we’re in Java and the factory pattern is prolific. You’re factory just needs to new up a <span class='inline-code'>MessageCopier</span> passing in the instance of the <span class='inline-code'>MessageSender</span>. Behaviour extended.</p>

<div class='normal-gist'><code id="gist-6724242" data-file="3.java"></code></div>


<p>One thing you may note is that the implementation of <span class='inline-code'>MessageCopier</span> is quite thin. It only has a new bit of behaviour in it. Everything that isn’t relevant is elsewhere; a separation of concerns. As the consumers of the <span class='inline-code'>MessageSender</span> interface get their implementations from a factory you can now add in new behaviour incrementally with minimal rework. As the behaviour is constrained you can test behaviour in isolation, more easily.</p>

<p><em>That was this month’s pattern fun fact. Do you have a pattern fun fact you would like to share? Send it to us at <a href="&#109;&#97;&#x69;&#108;&#116;&#111;&#58;&#112;&#x32;&#x40;&#x74;&#104;&#111;&#117;&#x67;&#104;&#x74;&#x77;&#111;&#114;&#107;&#115;&#46;&#x63;&#111;&#x6d;">&#x70;&#x32;&#64;&#116;&#x68;&#111;&#117;&#103;&#104;&#116;&#x77;&#111;&#114;&#107;&#x73;&#46;&#99;&#x6f;&#109;</a> and we’ll publish it.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hiding in Plain Sight: Stealth]]></title>
    <link href="http://thoughtworks.github.io/p2/issue05/virus-four"/>
    <updated>2013-10-05T00:00:00+05:30</updated>
    <id>http://thoughtworks.github.io/p2/issue05/virus-four</id>
    <content type="html"><![CDATA[<p>In November 1988,  the US admitted it had been designing and building stealth aircraft, and the world saw the freakish shape of the F-117 for the first time. And just one year after these aircraft made their first marks on the open sky, the malware makers came out with their own stealth weapons.</p>

<p>An old school boot sector virus would load when you booted a disc. With polymorphism, these viruses became harder to spot, as they were encrypted with a set of shifting keys. But ultimately, when they decrypted in memory, they were as easy to spot as a B-52 in a clear sky.</p>

<p> A stealth virus is more like a parasite: it attaches to and grows into an existing program. When the program loads, it begins listening for requests to access the disk, which it intercepts. And then, it tells lies.</p>

<p>The hallmark of a stealth virus is misdirection. Think: &ldquo;These are not the droids you’re looking for.&rdquo;  The stealth virus is the &ldquo;man in the middle&rdquo;, providing misleading answers to requests for directions. Everyone who comes looking for it will be sent elsewhere.</p>

<p>With the virus resident in memory, when the operating system tries to read from the disk, it’s actually calling the virus for directions. There is a table of pointers which is called by the operating system when it wants to read from disk. The virus is already there, controlling the table. It intercepts your read request and shows you whatever it wants &ndash; and stores a copy of the original request within itself. So it’s going to do whatever it wants, and then send you on to the original location you asked for.</p>

<p>And if anyone happens to call at the <em>virus’s</em> address, looking for the original code, it simply points them to a new location, where it has stashed the code it replaced. So everything still executes just as before. No-one will see the virus payload itself, because it’s always giving the wrong directions, ensuring it can’t be seen.</p>

<p>If you’re a virus, your purpose is to replicate, to pass on copies of yourself. So with every call for disk access, the virus checks the disk, looking for its own signature. If it sees that it’s not living there already, it will infect the disk. Now that the disk is infected, it becomes the vector for new infections.</p>

<p>Stealthing usually refers to avoiding the anti-virus, but there’s a visual aspect to it too. The user can’t be allowed to notice you’re there either. Upon infection, a stealth virus looks around, moves some old code, and puts itself in that spot. Stealth viruses hide themselves within existing programs, but in doing so, they make the host program larger.</p>

<p>But as the host program grew larger, users began to notice: &ldquo;Hey, how come Lotus 1-2-3 just got bigger?&rdquo; Especially in DOS, where the file size is spelled out as an exact number.  And so the practise of caving developed among the malware makers. When a virus uses caving as a stealth technique, it looks inside a host program for areas of unused space. DOS and Windows instructions needed to be aligned to 16 bit boundaries. If the instruction or data is smaller than that, the OS will pad out the rest with zeroes.  Large expanses of vacant, zeroed-out space.  And so virus builds itself into these caves of zeroes, hiding inside the program without enlarging the executable.</p>

<p>The file size stays exactly the same, and you stay in the dark as to what dark thing is really living on your computer.</p>
]]></content>
  </entry>
  
</feed>
